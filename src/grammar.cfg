Package grammar;

Helpers

lettre = [['a' .. 'z'] + ['A' .. 'Z']];
chiffre = ['0' .. '9'];
alpha = [lettre + ['_' + '$']];
alphanum = [lettre + chiffre];
entier = ('+'|'-') chiffre chiffre* ;




Tokens
number = ['0' .. '9']+;

plus= '+';
minus = '-';
mult= '*';
div= '/';
mod= '%';
l_par = '(';
r_par = ')';
ou='|';
and ='&';
not = '!';
equal = '=';
inf= '<';
vrai = 'vrai' ;
faux = 'faux' ;
blank = (' ' | 13 | 10)+;
id = alpha alphanum*;
epsilon = ;
virgule =',';
acolade_gauche= '[';
acolade_droit= ']';
crochet_gauche= '{';
crochet_droit = '}';
si='si';
sinon='sinon';
lire = 'lire';
ecrire = 'ecrire()';
alors ='alors';
retour = 'retour';
tantque ='tantque';
faire='faire';
entier = 'entier';
bool = ('vrai' | 'faux' );

Ignored Tokens
blank;

Productions
exp ={regle_ou} exp ou o |
{next_ou}o ;

o ={regle_et} o and e|
{next_et}e ;

e= {regle_egale} p equal e |
{regle_inf}e inf p |
{next_equation} p ;

p= {regle_add}p plus m |
{regle_sub}p minus m |
{next_add_sub}m ;

m = {regle_mul}m mult n |
{regle_div}m div n |
{next_mul_div}n ;

n = {regle_not} not n |
{next_not}g ;

g = {regle_par}l_par exp r_par |
{number} number |
{true} vrai |
{false} faux |
{variable}var |
{apple_fct}appelfct |
{read} lire l_par r_par ;

appelfct = {appelfct} id l_par list_expression r_par;
instr ={instr1} var equal exp |
    {instr2} tantque exp faire bloc |
    {instr3} id l_par le r_par |
    {instr4} si exp alors bloc |
    {instr5} si exp alors blocsi sinon  blocsinon |
    {instr6} retour exp  |
    {instr7} ecrire l_par exp r_par ;

bloc =  {bloc} crochet_gauche linstr crochet_droit;
blocsi =  {blocsi} bloc;
blocsinon =  {blocsinon}bloc;

linstr ={regle_linstr} instr linstr |
{epsilon1}epsilon;

le = {list_expression} exp list_expression |
{epsilon2}epsilon;

list_expression =  {list_expression_virgule}virgule exp list_expression |
{epsilon3}epsilon;

var = {identifiant}id |
{tableau_expression}id acolade_gauche exp acolade_droit ;

decvar = {dec_var} type id |
{dec_var_tab}type id acolade_gauche number acolade_droit ;

type = {bool}bool |
{entier}entier;

decfonc = {decfonc} typeopt id l_par paramldecvar r_par
            localldecvar bloc;

typeopt ={typeopt} type |
{epsilon4} epsilon;

ldecvar = {ldecvar} decvar ldecvar1|
{epsilon5}epsilon;

paramldecvar = {paramldecvar} ldecvar;
localldecvar = {localldecvar} ldecvar;

ldecvar1= {ldecvar1} virgule decvar ldecvar1 |
{epsilon6} epsilon;

ldecfonc = {ldecfonc} decfonc ldecfonc |
{epsilon7} epsilon;

prog = {prog} ldecvar ldecfonc;
